<html>
  <head>

    <title>What in the name of...?</title>
    
    <script src="squawksynth.js"></script>
    <script src="webaudio.js"></script>
    <script src="converter.js"></script>
    <script src="squawkstream.js"></script>
    
    <script language="JavaScript">

      // Configuration
      var emulateSampleRate = 16000.0;  // Emulation sample rate
      var masterVolume      = 1.0;      // Master volume

      var player;    // B) Reads music data, controls synthesizer =>
      var synth;     // C) Oscillators generate samples, sends them to converter =>
      var converter; // D) Converts emulated sample rate to system native rate, sends to output =>
      var output;    // E) Plays sample stream, acts as a sink, is thus the source of all system timing.

    function setup(body){
        // Initialize synthesizer
        synth = new SquawkSynth();
        // Initialize audio output
        try {
          output = new WebAudioStream();
          mute.onchange();
        } catch(e) {
          alert(
            "The Web Audio API is not supported in this here browser." + '\n' +
            "You can still work, you just won't get any sound."        + '\n' +
            "Come back using Chrome, FireFox or Safari?"               + '\n' +
            "Sorry for the inconvenience! =)"                          + '\n' +
            ""                                                         + '\n' +
            "With love,"                                               + '\n' +
            "-devs"
          );
          return;
        }
        // Initialize sample rate conversion
        converter = new SampleRateConverter(emulateSampleRate, output.getSampleRate());

        // drag and drop
        body.ondragover = function() {
            return false;
        };
        body.ondragend = function() {
            return false;
        };
        body.ondrop = function(e) {
            e.preventDefault(); //prevent browser from showing dropped file
            //read file and get its content
            var file = e.dataTransfer.files[0],
                reader = new FileReader();
            reader.onload = function(event) {
                var music = event.target.result;
                // Remove all unwanted text, retain comma seperated text
                music = music.replace(/\/\/"[tT]rack/g, 'Track');
                music = music.replace(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$|([^:]|^)\#.*$|([^:]|^)Song.*$|([^:]|^)}.*$/gm, '');
                music = music.replace(/"(?![a-zA-Z])/gm, ',');
                music = music.replace(/[\s]/g, '');
                music = music.replace(/Track/g, 'Track ');
                // Create array from music var minus trailing comma
                music = music.slice(0, -1).split(',');
                for(var i = 0; i < music.length; i++){
                    if(music[i][0] !== 'T'){ // skip parsing for Track strings
                        // parse to int and calculate if necessary
                        if(music[i].indexOf('+') !== -1){
                            for(var j = 0, calc = 0, split = music[i].split('+'); j < split.length; j++){
                                calc += parseInt(split[j]);
                            }
                            music[i] = calc;
                        }
                        else{
                            music[i] = parseInt(music[i]);
                        }
                    }
                }
                playSong(music);
            };
            reader.readAsText(file);
            return false;
        };
      }

      // Let's get this show on the road!
      function playSong(song) {
        // Initialize player
        player = new SquawkStream(emulateSampleRate);
        player.setSource(song);
        // Build graph [player]=>[synth]=>[converter]=>[output]
        // Output is the sink, and drives/times the entire graph.
        synth.connect(player);
        converter.connect(synth);
        output.connect(converter);
        // Begin playback (?)
        output.play(!pause.checked);
        setInterval(function(){if(player.getChannelActiveMute() == 0){output.pause(true);}}, 10);
        // Refresh stats every 10mS or so
        setInterval(refreshStats, 10);
      }

      function refreshStats() {
        count.innerHTML = player.getTickCount().toString();
        active.innerHTML = player.getChannelActiveMute().toString();
      }

    </script>
  </head>
  <body onload="setup(this);" style="font-family: Courier New; text-align: center;">
    <h1>HEWNIQUORN TEKKNO MUZAK!</h1>
    <h3>- DEVELOPMENT ZONE FOR SQUAWK 2.0: ATMlib -</h3>
    <!-- <img src="https://media.giphy.com/media/112iRUPbOe9DEs/giphy.gif" align="absmiddle"><br><br> -->
    <span>Ticks: </span><span id="count">0</span><br><br>
    <span>Active: </span><span id="active">0</span><br><br>
    <input type="checkbox" id="mute" onchange="output.setVolume(this.checked ? 0.0 : masterVolume);"> <b>MUTE</b> FOR THE LOVE OF ALL THINGS SACRED!</input><br>
    <input type="checkbox" id="noise"> <b>RETRIG</b> NOISE TEST (WHAT IF U HAD ROBOT EARS?)</input><br>
    <input type="checkbox" id="pause" onchange="output.pause(this.checked);"> <b>PAUSE</b> MAKES THE GEARS STOP TURNING...</input><br>
    <input type="checkbox" id="expriette" onchange="ex1panel.style.display = this.checked ? 'block' : 'none';"> <b>EXPRIETTE</b> (EXPERIMENT ONE)</input><br>
    <div id="ex1panel" style="display:none;">
      Length: <input onchange="synth.setEx1(0, parseInt(this.value));" value="8"><br>
      Start: <input onchange="synth.setEx1(1, parseInt(this.value));" value="16">
    </div>
    
    ...BUT REMEMBER, JOE WILL DANCE INTO ETERNITY!
  </body>
</html>
