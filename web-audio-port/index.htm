<html>
  <head>

    <title>What in the name of...?</title>
    
    <script src="squawksynth.js"></script>
    <script src="webaudio.js"></script>
    <script src="converter.js"></script>
    <script src="squawkstream.js"></script>
    
    <script language="JavaScript">

      // Configuration
      var emulateSampleRate = 16000.0;  // Emulation sample rate
      var masterVolume      = 1.0;      // Master volume

      // Note to self: Addresses could (should?) be derived from RETs (at expense of RAM)
      
      // Synthesizer topology
      /*var music = [  // A) Sample music =>
        //                            // setup bytes 21
        0x08,                         // Number of tracks
        0x00, 0,                      // Address of track 0
        0x04, 0,                      // Address of track 1
        0x08, 0,                      // Address of track 2
        0x0D, 0,                      // Address of track 3
        0x15, 0,                      // Address of track 4
        0x2A, 0,                      // Address of track 5
        0x38, 0,                      // Address of track 6
        0x42, 0,                      // Address of track 7
        0x02,                         // Channel 0 entry track (PULSE)
        0x01,                         // Channel 1 entry track (SQUARE)
        0x00,                         // Channel 2 entry track (TRIANGLE)
        0x03,                         // Channel 3 entry track (NOISE)

        "Track 0",                    // ticks = 64, bytes = 5
        0x40, 0,                      // FX: SET VOLUME: volume = 0
        0x9F + 63,                    // DELAY: 63 ticks
        0xFE,                         // RETURN

        "Track 1",                    // ticks = 2048, bytes = 4
        0xFD, 3, 4,                   // REPEAT: count = 4 - track = 4  (4 * 512 ticks)
        0xFE,                         // RETURN

        "Track 2",                    // ticks = 2048, bytes = 5
        0xFD, 31, 6,                  // REPEAT: count = 32 - track = 5  (32 * 64 ticks)
        0x00,                         // NOTE OFF
        0xFE,                         // RETURN

        "Track 3",                   // ticks = 2048, bytes = 7
        0xFD, 7,  0,                  // REPEAT: count = 8 - track = 8 (8 *64 ticks)
        0x9F + 8,                     // DELAY: 4 ticks
        0xFD, 23, 7,                  // REPEAT: count = 24 - track = 8 (24 *64 ticks)
        0xFE,                         // RETURN

        "Track 4",                   // ticks = 512, bytes = 21
        0xFD, 1, 5,                   // REPEAT: count = 2 - track = 5  (2 * 64 ticks)
        0x4B, 3,                      // FX: ADD TRANSPOSITION: notes = 3
        0xFD, 1, 5,                   // REPEAT: count = 2 - track = 5  (2 * 64 ticks)
        0x4B, -1,                     // FX: ADD TRANSPOSITION: notes = 3
        0xFD, 1, 5,                   // REPEAT: count = 2 - track = 5  (2 * 64 ticks)
        0x4B, 3,                      // FX: ADD TRANSPOSITION: notes = 3
        0xFD, 1, 5,                   // REPEAT: count = 2 - track = 5  (2 * 64 ticks)
        0x4B, -5,                     // FX: ADD TRANSPOSITION: notes = 3
        0xFE,                         // RETURN

        "Track 5",                    // ticks = 64, bytes = 14
        0x00 + 49,                    // NOTE ON: note = 49 (delay 1 tick)
        0x40, 63,                     // FX: SET VOLUME: volume = 63
        0x41, -16,                    // FX: VOLUME SLIDE ON: steps = -8
        0x9F + 16,                    // DELAY: 16 ticks
        0x40, 16,                     // FX: SET VOLUME: volume = 16
        0x41, -4,                     // FX: VOLUME SLIDE ON: steps = -4
        0x9F + 4,                     // DELAY: 4 ticks
        0x43,                         // FX: VOLUME SLIDE OFF
        0x9F + 43,                    // DELAY: 43 ticks
        0xFE,                         // RETURN

        "track 6",                    // ticks = 64, bytes = 10
        0x00 + 13,                    // NOTE ON: note = 23 (delay 1 tick)
        0x40, 32,                     // FX: SET VOLUME: volume = 32
        0x4E, 1, 0x00 + 0x00 + 30,    // SET TREMOLO OR VIBRATO: depth = 16 / retrig = OFF / TorV = TREMOLO / rate = 3
        0x9F + 62,                    // DELAY: 62 ticks
        0x4F,                         // TREMOLO OR VIBRATO OFF
        0x9F + 1,                     // DELAY: 1 ticks
        0xFE,                         // RETURN

        "track 7",                    // ticks = 64, bytes = 20
        0x40, 32,                     // FX: SET VOLUME: volume = 32
        0x9F + 1,                     // DELAY: ticks = 1
        0x40,  0,                     // FX: SET VOLUME: volume = 0
        0x9F + 15,                    // DELAY: ticks = 15

        0x40, 32,                     // FX: SET VOLUME: volume = 32
        0x9F + 1,                     // DELAY: ticks = 1
        0x40,  0,                     // FX: SET VOLUME: volume = 0
        0x9F + 15,                    // DELAY: ticks = 15

        0x40, 32,                     // FX: SET VOLUME: volume = 32
        0x41, -2,                     // FX: VOLUME SLIDE ON: steps = -2
        0x9F + 16,                    // DELAY: ticks = 16
        0x43,                         // FX: VOLUME SLIDE OFF
        0x9F + 16,                    // DELAY: ticks = 16
        0xFE,                         // RETURN

      ];*/

      var player;    // B) Reads music data, controls synthesizer =>
      var synth;     // C) Oscillators generate samples, sends them to converter =>
      var converter; // D) Converts emulated sample rate to system native rate, sends to output =>
      var output;    // E) Plays sample stream, acts as a sink, is thus the source of all system timing.

    function setup(body){
        // Initialize synthesizer
        synth = new SquawkSynth();
        // Initialize audio output
        try {
          output = new WebAudioStream();
          mute.onchange();
        } catch(e) {
          alert(
            "The Web Audio API is not supported in this here browser." + '\n' +
            "You can still work, you just won't get any sound."        + '\n' +
            "Come back using Chrome, FireFox or Safari?"               + '\n' +
            "Sorry for the inconvenience! =)"                          + '\n' +
            ""                                                         + '\n' +
            "With love,"                                               + '\n' +
            "-devs"
          );
          return;
        }
        // Initialize sample rate conversion
        converter = new SampleRateConverter(emulateSampleRate, output.getSampleRate());

        // drag and drop
        body.ondragover = function() {
            return false;
        };
        body.ondragend = function() {
            return false;
        };
        body.ondrop = function(e) {
            e.preventDefault(); //prevent browser from showing dropped file
            //read file and get its content
            var file = e.dataTransfer.files[0],
                reader = new FileReader();
            reader.onload = function(event) {
                var music = event.target.result;
                // Remove all unwanted text, retain comma seperated text
                music = music.replace(/\/\/"[tT]rack/g, 'Track');
                music = music.replace(/\/\*[\s\S]*?\*\/|([^:]|^)\/\/.*$|([^:]|^)\#.*$|([^:]|^)Song.*$|([^:]|^)}.*$/gm, '');
                music = music.replace(/"(?![a-zA-Z])/gm, ',');
                music = music.replace(/[\s]/g, '');
                music = music.replace(/Track/g, 'Track ');
                // Create array from music var minus trailing comma
                music = music.slice(0, -1).split(',');
                for(var i = 0; i < music.length; i++){
                    if(music[i][0] !== 'T'){ // skip parsing for Track strings
                        // parse to int and calculate if necessary
                        if(music[i].indexOf('+') !== -1){
                            for(var j = 0, calc = 0, split = music[i].split('+'); j < split.length; j++){
                                calc += parseInt(split[j]);
                            }
                            music[i] = calc;
                        }
                        else{
                            music[i] = parseInt(music[i]);
                        }
                    }
                }
                playSong(music);
            };
            reader.readAsText(file);
            return false;
        };
      }

      // Let's get this show on the road!
      function playSong(song) {
        // Initialize player
        player = new SquawkStream(emulateSampleRate);
        player.setSource(song);
        // Build graph [player]=>[synth]=>[converter]=>[output]
        // Output is the sink, and drives/times the entire graph.
        synth.connect(player);
        converter.connect(synth);
        output.connect(converter);
        // Begin playback (?)
        output.play(!pause.checked);
        // Refresh stats every 10mS or so
        setInterval(refreshStats, 10);
      }

      function refreshStats() {
        count.innerHTML = player.getTickCount().toString();
      }

    </script>
  </head>
  <body onload="setup(this);" style="font-family: Courier New; text-align: center;">
    <h1>HEWNIQUORN TEKKNO MUZAK!</h1>
    <h3>- DEVELOPMENT ZONE FOR SQUAWK 2.0: ATMlib -</h3>
    <!-- <img src="https://media.giphy.com/media/112iRUPbOe9DEs/giphy.gif" align="absmiddle"><br><br> -->
    <span>Ticks: </span><span id="count">0</span><br><br>
    <input type="checkbox" id="mute" onchange="output.setVolume(this.checked ? 0.0 : masterVolume);"> <b>MUTE</b> FOR THE LOVE OF ALL THINGS SACRED!</input><br>
    <input type="checkbox" id="noise"> <b>RETRIG</b> NOISE TEST (WHAT IF U HAD ROBOT EARS?)</input><br>
    <input type="checkbox" id="pause" onchange="output.pause(this.checked);"> <b>PAUSE</b> MAKES THE GEARS STOP TURNING...</input><br>
    <input type="checkbox" id="expriette" onchange="ex1panel.style.display = this.checked ? 'block' : 'none';"> <b>EXPRIETTE</b> (EXPERIMENT ONE)</input><br>
    <div id="ex1panel" style="display:none;">
      Length: <input onchange="synth.setEx1(0, parseInt(this.value));" value="8"><br>
      Start: <input onchange="synth.setEx1(1, parseInt(this.value));" value="16">
    </div>
    
    ...BUT REMEMBER, JOE WILL DANCE INTO ETERNITY!
  </body>
</html>
